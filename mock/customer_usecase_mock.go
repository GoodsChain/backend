// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/usecase (interfaces: CustomerUsecase)
//
// Generated by this command:
//
//	mockgen -destination=mock/customer_usecase_mock.go -package=mock github.com/GoodsChain/backend/usecase CustomerUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerUsecase is a mock of CustomerUsecase interface.
type MockCustomerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerUsecaseMockRecorder
	isgomock struct{}
}

// MockCustomerUsecaseMockRecorder is the mock recorder for MockCustomerUsecase.
type MockCustomerUsecaseMockRecorder struct {
	mock *MockCustomerUsecase
}

// NewMockCustomerUsecase creates a new mock instance.
func NewMockCustomerUsecase(ctrl *gomock.Controller) *MockCustomerUsecase {
	mock := &MockCustomerUsecase{ctrl: ctrl}
	mock.recorder = &MockCustomerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerUsecase) EXPECT() *MockCustomerUsecaseMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerUsecase) CreateCustomer(customer *model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerUsecaseMockRecorder) CreateCustomer(customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerUsecase)(nil).CreateCustomer), customer)
}

// DeleteCustomer mocks base method.
func (m *MockCustomerUsecase) DeleteCustomer(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockCustomerUsecaseMockRecorder) DeleteCustomer(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockCustomerUsecase)(nil).DeleteCustomer), id)
}

// GetAllCustomers mocks base method.
func (m *MockCustomerUsecase) GetAllCustomers() ([]*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers")
	ret0, _ := ret[0].([]*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockCustomerUsecaseMockRecorder) GetAllCustomers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockCustomerUsecase)(nil).GetAllCustomers))
}

// GetCustomer mocks base method.
func (m *MockCustomerUsecase) GetCustomer(id string) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", id)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockCustomerUsecaseMockRecorder) GetCustomer(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockCustomerUsecase)(nil).GetCustomer), id)
}

// UpdateCustomer mocks base method.
func (m *MockCustomerUsecase) UpdateCustomer(id string, customer *model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", id, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerUsecaseMockRecorder) UpdateCustomer(id, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerUsecase)(nil).UpdateCustomer), id, customer)
}
