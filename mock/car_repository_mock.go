// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/repository (interfaces: CarRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/car_repository_mock.go -package=mock github.com/GoodsChain/backend/repository CarRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCarRepository is a mock of CarRepository interface.
type MockCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarRepositoryMockRecorder
	isgomock struct{}
}

// MockCarRepositoryMockRecorder is the mock recorder for MockCarRepository.
type MockCarRepositoryMockRecorder struct {
	mock *MockCarRepository
}

// NewMockCarRepository creates a new mock instance.
func NewMockCarRepository(ctrl *gomock.Controller) *MockCarRepository {
	mock := &MockCarRepository{ctrl: ctrl}
	mock.recorder = &MockCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarRepository) EXPECT() *MockCarRepositoryMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCarRepository) CreateCar(car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarRepositoryMockRecorder) CreateCar(car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCarRepository)(nil).CreateCar), car)
}

// DeleteCar mocks base method.
func (m *MockCarRepository) DeleteCar(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockCarRepositoryMockRecorder) DeleteCar(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockCarRepository)(nil).DeleteCar), id)
}

// GetAllCars mocks base method.
func (m *MockCarRepository) GetAllCars() ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCars")
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCars indicates an expected call of GetAllCars.
func (mr *MockCarRepositoryMockRecorder) GetAllCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCars", reflect.TypeOf((*MockCarRepository)(nil).GetAllCars))
}

// GetCarByID mocks base method.
func (m *MockCarRepository) GetCarByID(id string) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByID", id)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByID indicates an expected call of GetCarByID.
func (mr *MockCarRepositoryMockRecorder) GetCarByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByID", reflect.TypeOf((*MockCarRepository)(nil).GetCarByID), id)
}

// UpdateCar mocks base method.
func (m *MockCarRepository) UpdateCar(id string, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", id, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockCarRepositoryMockRecorder) UpdateCar(id, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockCarRepository)(nil).UpdateCar), id, car)
}
