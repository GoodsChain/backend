// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/usecase (interfaces: SupplierUsecase)
//
// Generated by this command:
//
//	mockgen -destination=mock/supplier_usecase_mock.go -package=mock github.com/GoodsChain/backend/usecase SupplierUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSupplierUsecase is a mock of SupplierUsecase interface.
type MockSupplierUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierUsecaseMockRecorder
	isgomock struct{}
}

// MockSupplierUsecaseMockRecorder is the mock recorder for MockSupplierUsecase.
type MockSupplierUsecaseMockRecorder struct {
	mock *MockSupplierUsecase
}

// NewMockSupplierUsecase creates a new mock instance.
func NewMockSupplierUsecase(ctrl *gomock.Controller) *MockSupplierUsecase {
	mock := &MockSupplierUsecase{ctrl: ctrl}
	mock.recorder = &MockSupplierUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierUsecase) EXPECT() *MockSupplierUsecaseMockRecorder {
	return m.recorder
}

// CreateSupplier mocks base method.
func (m *MockSupplierUsecase) CreateSupplier(supplier *model.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupplier", supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSupplier indicates an expected call of CreateSupplier.
func (mr *MockSupplierUsecaseMockRecorder) CreateSupplier(supplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupplier", reflect.TypeOf((*MockSupplierUsecase)(nil).CreateSupplier), supplier)
}

// DeleteSupplier mocks base method.
func (m *MockSupplierUsecase) DeleteSupplier(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSupplier", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSupplier indicates an expected call of DeleteSupplier.
func (mr *MockSupplierUsecaseMockRecorder) DeleteSupplier(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSupplier", reflect.TypeOf((*MockSupplierUsecase)(nil).DeleteSupplier), id)
}

// GetAllSuppliers mocks base method.
func (m *MockSupplierUsecase) GetAllSuppliers() ([]*model.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSuppliers")
	ret0, _ := ret[0].([]*model.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSuppliers indicates an expected call of GetAllSuppliers.
func (mr *MockSupplierUsecaseMockRecorder) GetAllSuppliers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSuppliers", reflect.TypeOf((*MockSupplierUsecase)(nil).GetAllSuppliers))
}

// GetSupplier mocks base method.
func (m *MockSupplierUsecase) GetSupplier(id string) (*model.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplier", id)
	ret0, _ := ret[0].(*model.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplier indicates an expected call of GetSupplier.
func (mr *MockSupplierUsecaseMockRecorder) GetSupplier(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplier", reflect.TypeOf((*MockSupplierUsecase)(nil).GetSupplier), id)
}

// UpdateSupplier mocks base method.
func (m *MockSupplierUsecase) UpdateSupplier(id string, supplier *model.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSupplier", id, supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSupplier indicates an expected call of UpdateSupplier.
func (mr *MockSupplierUsecaseMockRecorder) UpdateSupplier(id, supplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSupplier", reflect.TypeOf((*MockSupplierUsecase)(nil).UpdateSupplier), id, supplier)
}
