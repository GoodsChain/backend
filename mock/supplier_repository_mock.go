// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/repository (interfaces: SupplierRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/supplier_repository_mock.go -package=mock github.com/GoodsChain/backend/repository SupplierRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSupplierRepository is a mock of SupplierRepository interface.
type MockSupplierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierRepositoryMockRecorder
	isgomock struct{}
}

// MockSupplierRepositoryMockRecorder is the mock recorder for MockSupplierRepository.
type MockSupplierRepositoryMockRecorder struct {
	mock *MockSupplierRepository
}

// NewMockSupplierRepository creates a new mock instance.
func NewMockSupplierRepository(ctrl *gomock.Controller) *MockSupplierRepository {
	mock := &MockSupplierRepository{ctrl: ctrl}
	mock.recorder = &MockSupplierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierRepository) EXPECT() *MockSupplierRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSupplierRepository) Create(supplier *model.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSupplierRepositoryMockRecorder) Create(supplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSupplierRepository)(nil).Create), supplier)
}

// Delete mocks base method.
func (m *MockSupplierRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSupplierRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSupplierRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockSupplierRepository) Get(id string) (*model.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSupplierRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSupplierRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockSupplierRepository) GetAll() ([]*model.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*model.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSupplierRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSupplierRepository)(nil).GetAll))
}

// Update mocks base method.
func (m *MockSupplierRepository) Update(id string, supplier *model.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSupplierRepositoryMockRecorder) Update(id, supplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSupplierRepository)(nil).Update), id, supplier)
}
