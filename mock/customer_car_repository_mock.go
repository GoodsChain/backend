// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/repository (interfaces: CustomerCarRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/customer_car_repository_mock.go -package=mock github.com/GoodsChain/backend/repository CustomerCarRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerCarRepository is a mock of CustomerCarRepository interface.
type MockCustomerCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerCarRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerCarRepositoryMockRecorder is the mock recorder for MockCustomerCarRepository.
type MockCustomerCarRepositoryMockRecorder struct {
	mock *MockCustomerCarRepository
}

// NewMockCustomerCarRepository creates a new mock instance.
func NewMockCustomerCarRepository(ctrl *gomock.Controller) *MockCustomerCarRepository {
	mock := &MockCustomerCarRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerCarRepository) EXPECT() *MockCustomerCarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerCarRepository) Create(customerCar *model.CustomerCar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", customerCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerCarRepositoryMockRecorder) Create(customerCar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerCarRepository)(nil).Create), customerCar)
}

// Delete mocks base method.
func (m *MockCustomerCarRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerCarRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerCarRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockCustomerCarRepository) GetAll() ([]*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCustomerCarRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCustomerCarRepository)(nil).GetAll))
}

// GetByCarID mocks base method.
func (m *MockCustomerCarRepository) GetByCarID(carID string) ([]*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCarID", carID)
	ret0, _ := ret[0].([]*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCarID indicates an expected call of GetByCarID.
func (mr *MockCustomerCarRepositoryMockRecorder) GetByCarID(carID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCarID", reflect.TypeOf((*MockCustomerCarRepository)(nil).GetByCarID), carID)
}

// GetByCustomerID mocks base method.
func (m *MockCustomerCarRepository) GetByCustomerID(customerID string) ([]*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCustomerID", customerID)
	ret0, _ := ret[0].([]*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomerID indicates an expected call of GetByCustomerID.
func (mr *MockCustomerCarRepositoryMockRecorder) GetByCustomerID(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomerID", reflect.TypeOf((*MockCustomerCarRepository)(nil).GetByCustomerID), customerID)
}

// GetByID mocks base method.
func (m *MockCustomerCarRepository) GetByID(id string) (*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCustomerCarRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerCarRepository)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockCustomerCarRepository) Update(id string, customerCar *model.CustomerCar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, customerCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerCarRepositoryMockRecorder) Update(id, customerCar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerCarRepository)(nil).Update), id, customerCar)
}
