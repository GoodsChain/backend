// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/usecase (interfaces: CustomerCarUsecase)
//
// Generated by this command:
//
//	mockgen -destination=mock/customer_car_usecase_mock.go -package=mock github.com/GoodsChain/backend/usecase CustomerCarUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerCarUsecase is a mock of CustomerCarUsecase interface.
type MockCustomerCarUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerCarUsecaseMockRecorder
	isgomock struct{}
}

// MockCustomerCarUsecaseMockRecorder is the mock recorder for MockCustomerCarUsecase.
type MockCustomerCarUsecaseMockRecorder struct {
	mock *MockCustomerCarUsecase
}

// NewMockCustomerCarUsecase creates a new mock instance.
func NewMockCustomerCarUsecase(ctrl *gomock.Controller) *MockCustomerCarUsecase {
	mock := &MockCustomerCarUsecase{ctrl: ctrl}
	mock.recorder = &MockCustomerCarUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerCarUsecase) EXPECT() *MockCustomerCarUsecaseMockRecorder {
	return m.recorder
}

// CreateCustomerCar mocks base method.
func (m *MockCustomerCarUsecase) CreateCustomerCar(customerCar *model.CustomerCar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerCar", customerCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomerCar indicates an expected call of CreateCustomerCar.
func (mr *MockCustomerCarUsecaseMockRecorder) CreateCustomerCar(customerCar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerCar", reflect.TypeOf((*MockCustomerCarUsecase)(nil).CreateCustomerCar), customerCar)
}

// DeleteCustomerCar mocks base method.
func (m *MockCustomerCarUsecase) DeleteCustomerCar(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerCar", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerCar indicates an expected call of DeleteCustomerCar.
func (mr *MockCustomerCarUsecaseMockRecorder) DeleteCustomerCar(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerCar", reflect.TypeOf((*MockCustomerCarUsecase)(nil).DeleteCustomerCar), id)
}

// GetAllCustomerCars mocks base method.
func (m *MockCustomerCarUsecase) GetAllCustomerCars() ([]*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomerCars")
	ret0, _ := ret[0].([]*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomerCars indicates an expected call of GetAllCustomerCars.
func (mr *MockCustomerCarUsecaseMockRecorder) GetAllCustomerCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomerCars", reflect.TypeOf((*MockCustomerCarUsecase)(nil).GetAllCustomerCars))
}

// GetCustomerCar mocks base method.
func (m *MockCustomerCarUsecase) GetCustomerCar(id string) (*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCar", id)
	ret0, _ := ret[0].(*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCar indicates an expected call of GetCustomerCar.
func (mr *MockCustomerCarUsecaseMockRecorder) GetCustomerCar(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCar", reflect.TypeOf((*MockCustomerCarUsecase)(nil).GetCustomerCar), id)
}

// GetCustomerCarsByCarID mocks base method.
func (m *MockCustomerCarUsecase) GetCustomerCarsByCarID(carID string) ([]*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCarsByCarID", carID)
	ret0, _ := ret[0].([]*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCarsByCarID indicates an expected call of GetCustomerCarsByCarID.
func (mr *MockCustomerCarUsecaseMockRecorder) GetCustomerCarsByCarID(carID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCarsByCarID", reflect.TypeOf((*MockCustomerCarUsecase)(nil).GetCustomerCarsByCarID), carID)
}

// GetCustomerCarsByCustomerID mocks base method.
func (m *MockCustomerCarUsecase) GetCustomerCarsByCustomerID(customerID string) ([]*model.CustomerCar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCarsByCustomerID", customerID)
	ret0, _ := ret[0].([]*model.CustomerCar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCarsByCustomerID indicates an expected call of GetCustomerCarsByCustomerID.
func (mr *MockCustomerCarUsecaseMockRecorder) GetCustomerCarsByCustomerID(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCarsByCustomerID", reflect.TypeOf((*MockCustomerCarUsecase)(nil).GetCustomerCarsByCustomerID), customerID)
}

// UpdateCustomerCar mocks base method.
func (m *MockCustomerCarUsecase) UpdateCustomerCar(id string, customerCar *model.CustomerCar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerCar", id, customerCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerCar indicates an expected call of UpdateCustomerCar.
func (mr *MockCustomerCarUsecaseMockRecorder) UpdateCustomerCar(id, customerCar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerCar", reflect.TypeOf((*MockCustomerCarUsecase)(nil).UpdateCustomerCar), id, customerCar)
}
