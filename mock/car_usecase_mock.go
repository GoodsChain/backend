// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoodsChain/backend/usecase (interfaces: CarUsecase)
//
// Generated by this command:
//
//	mockgen -destination=mock/car_usecase_mock.go -package=mock github.com/GoodsChain/backend/usecase CarUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/GoodsChain/backend/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCarUsecase is a mock of CarUsecase interface.
type MockCarUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCarUsecaseMockRecorder
	isgomock struct{}
}

// MockCarUsecaseMockRecorder is the mock recorder for MockCarUsecase.
type MockCarUsecaseMockRecorder struct {
	mock *MockCarUsecase
}

// NewMockCarUsecase creates a new mock instance.
func NewMockCarUsecase(ctrl *gomock.Controller) *MockCarUsecase {
	mock := &MockCarUsecase{ctrl: ctrl}
	mock.recorder = &MockCarUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarUsecase) EXPECT() *MockCarUsecaseMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCarUsecase) CreateCar(car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarUsecaseMockRecorder) CreateCar(car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCarUsecase)(nil).CreateCar), car)
}

// DeleteCar mocks base method.
func (m *MockCarUsecase) DeleteCar(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockCarUsecaseMockRecorder) DeleteCar(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockCarUsecase)(nil).DeleteCar), id)
}

// GetAllCars mocks base method.
func (m *MockCarUsecase) GetAllCars() ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCars")
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCars indicates an expected call of GetAllCars.
func (mr *MockCarUsecaseMockRecorder) GetAllCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCars", reflect.TypeOf((*MockCarUsecase)(nil).GetAllCars))
}

// GetCar mocks base method.
func (m *MockCarUsecase) GetCar(id string) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar", id)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCar indicates an expected call of GetCar.
func (mr *MockCarUsecaseMockRecorder) GetCar(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockCarUsecase)(nil).GetCar), id)
}

// UpdateCar mocks base method.
func (m *MockCarUsecase) UpdateCar(id string, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", id, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockCarUsecaseMockRecorder) UpdateCar(id, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockCarUsecase)(nil).UpdateCar), id, car)
}
