package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"

	"github.com/GoodsChain/backend/config"
	"github.com/GoodsChain/backend/handler"
	"github.com/GoodsChain/backend/logger"
	"github.com/GoodsChain/backend/repository"
	"github.com/GoodsChain/backend/usecase"
	"github.com/rs/zerolog/log"

	_ "github.com/GoodsChain/backend/docs" // docs is generated by Swag CLI
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title GoodsChain Backend System
// @version 1.0
// @description RESTful API for managing customer, supplier, car, and customer-car relationship data in the GoodsChain system.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:3000
// @BasePath /v1
// @schemes http https
func main() {
	// Initialize logger
	logger.InitLogger()

	// Initialize application context that can be cancelled
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Load configuration
	cfg := config.LoadConfig()
	
	// Set Gin mode based on environment
	gin.SetMode(gin.ReleaseMode)
	r := gin.New()
	
	// Use our custom middleware instead of the default one
	r.Use(gin.Recovery())
	r.Use(handler.ErrorHandlingMiddleware())

	// API versioning - group all routes under the version prefix
	apiVersionGroup := r.Group("/" + cfg.APIVersion)
	
	// Swagger documentation route
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Connect to database with enhanced connection pooling
	db, err := connectDB(cfg)
	if err != nil {
		log.Fatal().Err(err).Msg("Failed to connect to database")
	}

	// Initialize repositories, usecases, and handlers
	customerRepo := repository.NewCustomerRepository(db)
	customerUsecase := usecase.NewCustomerUsecase(customerRepo)
	customerHandler := handler.NewCustomerHandler(customerUsecase)

	supplierRepo := repository.NewSupplierRepository(db)
	supplierUsecase := usecase.NewSupplierUsecase(supplierRepo)
	supplierHandler := handler.NewSupplierHandler(supplierUsecase)

	carRepo := repository.NewCarRepository(db)
	carUsecase := usecase.NewCarUsecase(carRepo)
	carHandler := handler.NewCarHandler(carUsecase)

	// Initialize customer car repository, usecase, and handler
	customerCarRepo := repository.NewCustomerCarRepository(db)
	customerCarUsecase := usecase.NewCustomerCarUsecase(customerCarRepo)
	customerCarHandler := handler.NewCustomerCarHandler(customerCarUsecase)

	// Initialize routes with the versioned router
	handler.InitRoutes(apiVersionGroup, customerHandler, supplierHandler, carHandler, customerCarHandler)

	// Add health check endpoint at the root level
	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "UP"})
	})

	// Configure HTTP server with timeouts from configuration
	srv := &http.Server{
		Addr:         ":" + cfg.APIPort,
		Handler:      r,
		ReadTimeout:  time.Duration(cfg.APIReadTimeout) * time.Second,
		WriteTimeout: time.Duration(cfg.APIWriteTimeout) * time.Second,
		IdleTimeout:  time.Duration(cfg.APIIdleTimeout) * time.Second,
	}

	// Start server in a goroutine so it doesn't block signal handling
	go func() {
		log.Info().Msgf("Server starting on port %s with API version %s", cfg.APIPort, cfg.APIVersion)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal().Err(err).Msg("Failed to start server")
		}
	}()

	// Start the graceful shutdown handling
	handleGracefulShutdown(ctx, srv, db, cfg)
}

// handleGracefulShutdown manages the graceful shutdown process for the server
func handleGracefulShutdown(ctx context.Context, srv *http.Server, db *sqlx.DB, cfg *config.Config) {
	// Set up channel to listen for signals
	quit := make(chan os.Signal, 1)
	// Listen for SIGINT and SIGTERM signals
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// Block until a signal is received
	sig := <-quit
	log.Info().Str("signal", sig.String()).Msg("Received signal. Shutting down server...")

	// Create a deadline for server shutdown from configuration
	shutdownTimeout := time.Duration(cfg.APIShutdownTimeout) * time.Second
	shutdownCtx, cancel := context.WithTimeout(ctx, shutdownTimeout)
	defer cancel()

	log.Info().Dur("timeout", shutdownTimeout).Msg("Initiating graceful shutdown with timeout")

	// Attempt graceful shutdown
	if err := srv.Shutdown(shutdownCtx); err != nil {
		log.Error().Err(err).Msg("Server forced to shutdown")
	}

	// Close database connection
	log.Info().Msg("Closing database connection...")
	if err := db.Close(); err != nil {
		log.Error().Err(err).Msg("Error closing database connection")
	}
	log.Info().Msg("Database connection closed")

	log.Info().Msg("Server exited gracefully")
}

func connectDB(cfg *config.Config) (*sqlx.DB, error) {
	// Get connection string from config
	connStr := cfg.GetDSN()
	
	// Connect to the database
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		return nil, err
	}

	// Configure connection pooling
	db.SetMaxOpenConns(cfg.DBMaxOpenConns)
	db.SetMaxIdleConns(cfg.DBMaxIdleConns)
	db.SetConnMaxLifetime(time.Duration(cfg.DBConnMaxLife) * time.Second)

	// Log the connection settings
	log.Info().
		Int("max_open_conns", cfg.DBMaxOpenConns).
		Int("max_idle_conns", cfg.DBMaxIdleConns).
		Int("conn_max_lifetime_seconds", cfg.DBConnMaxLife).
		Msg("Database connection pool configured")

	return db, nil
}
